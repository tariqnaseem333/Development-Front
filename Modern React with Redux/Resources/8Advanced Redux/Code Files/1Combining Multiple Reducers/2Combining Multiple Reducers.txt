Page - 3: 
Q2. What is the overall state stored in store and define the structure of store?

Answer: The overall state object is as shown below:

{
  books: [
    {
      title: "Origins",
      author: "Dan Brown",
      genre: "Medical thriller",
      summary: "The fifth installment in the Robert Langdon series",
      id: 1001
    },
    {
      title: "Crisis",
      author: "Robin Cook",
      genre: "Mystery thriller",
      summary: "The terrifying story of a doctor who is the victim of a medical malpractise crisis",
      id: 1002
    }
  ]
}
 

Q3. We know that actions can be dispatched from Components. Which component is dispatching which action?

Answer:

Action GET_ALL_BOOKS is being dispatched by ViewAllBooks present inside src/components/AddBook.js 

Action ADD_A_BOOK is being dispatched by AddBook present inside src/components/AddBook.js 

 

Q4. What's the default behaviour of the reducer?

Answer: By default the books reducer returns the following state object:

{
  books: [
    {
      title: "Origins",
      author: "Dan Brown",
      genre: "Medical thriller",
      summary: "The fifth installment in the Robert Langdon series",
      id: 1001
    },
    {
      title: "Crisis",
      author: "Robin Cook",
      genre: "Mystery thriller",
      summary: "The terrifying story of a doctor who is the victim of a medical malpractise crisis",
      id: 1002
    }
  ]
}



Page - 4: 
Let's say we were dealing with a state tree that had a structure like this:

{
  users: {},
  settings: {},
  products: {
    btyxlj666: {
      id: 'btyxlj666',
      text: 'HotWheels car',
      seller: {
        name: 'HotWheels',
        id: 'htwh666',
        img: 'tw2t.com/t2m.png'
      }   
    }
  }  
}
We now want to write a reducer for to manage this state object. We have three main properties on our state tree: users, settings, and products. We might have some actions for users, some products related actions, some for changing the settings.

Creating a single reducer to manage all parts of the state may be tedious to maintain and code. We can create 3 separate reducers for doing this, we can name them as - users, settings, and products as shown below:

export default function users(state = {}, action) {
  // switch statements with a default case
  // Handles only 'users' related Actions
}
export default function settings(state = {}, action) {
  // switch statements with a default case
  // Handles only 'settings' related Actions
}
export default function products(state = {}, action) {
  // switch statements with a default case
  // Handles only 'products' related Actions
}
 

We have now created an individual reducer for all of them. We can then create a single root reducer using Redux's combineReducers() method.

The combineReducers() needs an object. The keys in the object should be the state variable name in the store. The values of these keys should be a valid reducer.

const reducer = combineReducers({
  users: users,         //the key-name is users and the value is a function with same name, i.e - 'users'
  settings: settings,   //the key-name is settings, value is the 'settings' reducer function
  products: products,   //the key is products, value is the 'products' reducer function
});


Page - 6: 
For example, we want to handle the UPDATE_IMAGE action.

function products(state = {}, action) {
  switch (action.type) {
    case ADD_PRODUCT:
        ...
    case REMOVE_PRODUCT:
        ...
    case UPDATE_IMAGE:
        ???
  }
}
 

We have some nested data - and remember, reducers have to be pure and can't mutate any state. Here's one approach.

function products(state = {}, action) {
  switch (action.type) {
    case ADD_PRODUCT:
        ...
    case REMOVE_PRODUCT:
        ...
    case UPDATE_IMAGE:
      return {
        ...state,
        [action.productId]: {
          ...state[action.productId],
          seller: {
            ...state[action.productId].seller,
            image: action.newImage
          }
        }
      }
  }
}