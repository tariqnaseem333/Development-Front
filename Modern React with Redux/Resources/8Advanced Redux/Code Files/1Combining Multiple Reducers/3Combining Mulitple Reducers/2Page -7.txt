Demosteps:

Download the complete react-redux-combine-reducers-demo app, or follow these steps:

Step 1: Observe the Actions inside - src/actions/index.js

export const GET_ALL_BOOKS = 'GET_ALL_BOOKS'
export const ADD_A_BOOK = 'ADD_A_BOOK'
export const SET_SELECTED_BOOK = 'SET_SELECTED_BOOK'
export const UPDATE_BOOK_DETAILS = 'UPDATE_BOOK_DETAILS'
export function getAllBooks (books) {
  return {
    type: GET_ALL_BOOKS,
    books,
  }
}
export function addABook (newBook) {
  return {
    type: ADD_A_BOOK,
    newBook,
  }
}
export function setSelectedBook (selectedBook) {
  return {
    type: SET_SELECTED_BOOK,
    selectedBook,
  }
}
export function updateSelectedBook (updatedBook) {
  return {
    type: UPDATE_BOOK_DETAILS,
    updatedBook,
  }
}

 

Step 2: Reducers

[A] Observe the code inside src/reducers/books.js

import { GET_ALL_BOOKS, ADD_A_BOOK, UPDATE_BOOK_DETAILS } from "../actions";
const existingBooks = [
  {
    title: "Origins",
    author: "Dan Brown",
    genre: "Medical thriller",
    summary: "The fifth installment in the Robert Langdon series",
    id: 1001
  },
  {
    title: "Crisis",
    author: "Robin Cook",
    genre: "Mystery thriller",
    summary: "The terrifying story of a doctor who is the victim of a medical malpractise crisis",
    id: 1002
  }
];
export default function books(state = existingBooks, action) {
  switch (action.type) {
    case GET_ALL_BOOKS:
      return [
        ...state,
        ...action.books,
      ]
    case ADD_A_BOOK:
      return [
        action.newBook,
        ...state, 
      ]
    case UPDATE_BOOK_DETAILS: 
      const found = state.filter(_=>_.id!==action.updatedBook.id)
      found.push(action.updatedBook);
      return found
    default:
      return [
        ...state,
      ]
  }
}
 

[B] Observe the code inside src/reducers/selectedBook.js

import { SET_SELECTED_BOOK } from "../actions";
export default function selectedBook(state = {}, action) {
  switch (action.type) {
    case SET_SELECTED_BOOK:
      return {
        ...action.selectedBook, timeStamp: new Date().toLocaleTimeString()
      }
    default:
      return null
  }
}
 

[C] Observe the code inside src/reducers/index.js

import books from './books'
import selectedBook from './selectedBook'
import {combineReducers} from 'redux'
export default combineReducers({
  books,
  selectedBook,
})
 

Step 4: Components

[4.A] App - src/components/App.js

import React, { Component, Fragment } from 'react'
import { BrowserRouter as Router, Route, Switch, Link, Redirect } from 'react-router-dom'
import { connect } from 'react-redux'
import { getAllBooks } from '../actions'
import './App.css';
import AddBook from "./AddBook";
import ViewAllBooks from "./ViewAllBooks";
const dataList = [{
  title: "Crisis3",
  author: "Robin Cook",
  genre: "Mystery thriller",
  summary: "The terrifying story of a doctor who is the victim of a medical malpractise crisis",
  id: 1004
},{
  title: "Crisis4",
  author: "Robin Cook",
  genre: "Mystery thriller",
  summary: "The terrifying story of a doctor who is the victim of a medical malpractise crisis",
  id: 1005
}]
class App extends Component {
  componentDidMount = () => {
    this.props.dispatch(getAllBooks(dataList));
  }
  render() {
    const {books} = this.props;
    return (
      <Router>
        <Fragment>
          <nav className="navbar navbar-expand-md bg-dark navbar-dark ">
            <div className="navbar-header">
              <Link className="navbar-brand" to="/">Learning Portal</Link>
            </div>
            <ul className="navbar-nav ">
              <li className="nav-item">
                <Link className="nav-link" to="/card">View All Books</Link>
              </li>
              <li className="nav-item">
                <Link className="nav-link" to="/addBook">Add a Book</Link>
              </li>
              </ul>
              <ul className="navbar-nav ml-auto">
              <li className="nav-item">
                <Link className="nav-link" to="/">We have <span className="badge badge-success"> {books.length} </span> books</Link>
              </li>
            </ul>
          </nav>
          <br />
          <Switch>
              <Route exact path="/card" component={ViewAllBooks} />
              <Route path="/addBook" component={AddBook} />
              <Route path="/**" render={() => <Redirect to="/card" />} />
          </Switch>
        </Fragment>
      </Router>
    );
  }
}
function mapStateToProps({ books }) {
  return {
    books,
  }
}
export default connect(mapStateToProps)(App);
 

[4.B] View all books - src/components/ViewAllBooks.js

import React, { Component } from "react"
import { connect } from 'react-redux';
import Book from "./Book";
class ViewAllBooks extends Component {
  state = {
    buttonClicked: false,
  };
  handleMe = (value) => {
    this.setState(() => ({ buttonClicked: value }));
  }
  render() {
    const { books, selectedBook } = this.props;
    return (
      <React.Fragment>
        <div className="container-fluid">
          <h1 className="display-4 text-center">Catalog</h1>
          <div className="row">
            <div className="col-md-8 offset-2">
              {selectedBook && (
              <div className="row">
                <h5 className="text-center">Last edited book: {selectedBook.title} at {selectedBook.timeStamp}</h5>
              </div>
              )}
              <div className="row">
                {books && (
                  books.map((aBook, key) => <Book key={key} book={aBook} />)
                )}
                {books && (
                  <span className="text-danger">{books.errorMessage}</span>
                )}
              </div>
            </div>
          </div>
        </div>
      </React.Fragment>
    )
  }
}
function mapStateToProps({books, selectedBook}) {
  console.log(JSON.stringify(books));
  
  return {
    books,
    selectedBook,
  }
}
export default connect(mapStateToProps)(ViewAllBooks);
 

[4.C] Add book - src/components/AddBook.js

import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Redirect } from 'react-router-dom'
import { addABook } from '../actions'
class AddBook extends Component {
  state = {
    form: { title: "", author: "", genre: "", summary: "" },
    formErrorMessage: { title: "", author: "", genre: "", summary: "" },
    formValidity: { title: false, author: false, genre: false, summary: false, buttonActive: false },
    errorMessage: "",
    successMessage: ""
  }
  submitted = false;
  handleChange = event => {
    const inputfield = event.target.name;
    const enteredvalue = event.target.value;
    const newFormObj = this.state.form
    newFormObj[inputfield] = enteredvalue
    this.setState(() => ({ form: newFormObj }))
    this.validateField(inputfield, enteredvalue);
  };
  validateField = (fieldName, value) => {
    var formmessage = ""
    switch (fieldName) {
      case "title":
        value.length >= 4 ? formmessage = "" : formmessage = "Title must contain atleast 4 characters";
        break;
      case "author":
        value.length >= 3 ? formmessage = "" : formmessage = "Author must contain atleast 3 characters";
        break;
      case "genre":
        value !== "" ? formmessage = "" : formmessage = "Please select a genre";
        break;
      case "summary":
        var summaryRegex = new RegExp(/^[\w,\s]{10,100}$/);
        summaryRegex.test(value) ? formmessage = "" : formmessage = "Summary must contain atleast 10 characters and not more than 100 characters"
        break;
      default:
        break;
    }
    var fromErrObj = this.state.formErrorMessage;
    fromErrObj[fieldName] = formmessage
    this.setState({ formErrorMessage: fromErrObj })
    var status = false;
    if (formmessage === "") {
      status = true
    }
    var formValidObj = this.state.formValidity;
    formValidObj[fieldName] = status;
    formValidObj.buttonActive = formValidObj.title && formValidObj.author
      && formValidObj.genre && formValidObj.summary
    this.setState({ formValidity: formValidObj })
  };
  handleSubmit = (e) => {
    e.preventDefault();
    this.props.dispatch(addABook(this.state.form));
    this.submitted = true
  }
  render() {
    if (this.submitted === true) {
      return (
        <Redirect to='/card' />
      )
    }
    return (
      <React.Fragment>
        <div className="row">
          <div className="col-md-6 offset-3 card">
            <form onSubmit={this.handleSubmit} >
              <h2 className="text-center">Add A Book</h2>
              <div className="form-group">
                <label>Title</label>
                <input className="form-control" placeholder="Enter the title" name="title" onChange={this.handleChange} />
                <div className="text-danger">{this.state.formErrorMessage.title}</div>
              </div>
              <div className="form-group">
                <label>Author</label>
                <input className="form-control" placeholder="Enter the Author name" name="author" onChange={this.handleChange} />
                <div className="text-danger">{this.state.formErrorMessage.author}</div>
              </div>
              <div className="form-group">
                <label>Genre</label>
                <select className="form-control" onChange={this.handleChange} name="genre">
                  <option value="">---Select---</option>
                  <option value="Mystery Thriller">Mystery Thriller</option>
                  <option value="Fiction">Fiction</option>
                  <option value="Non-Fiction">Non-Fiction</option>
                </select>
                <div className="text-danger">{this.state.formErrorMessage.genre}</div>
              </div>
              <div className="form-group">
                <label>Summary</label>
                <textarea className="form-control" name="summary" onChange={this.handleChange}></textarea>
                <div className="text-danger">{this.state.formErrorMessage.summary}</div>
              </div>
              <button className="btn btn-success" type="submit" disabled={!this.state.formValidity.buttonActive}>Add Book</button>
              <br />
              <br />
            </form>
            <div className="text-success">{this.state.successMessage}</div>
            <div className="text-danger">{this.state.errorMessage}</div>
          </div>
        </div>
      </React.Fragment>
    );
  }
}
export default connect()(AddBook);
 

[4.D] Book - src/components/Book.js

import React, { Component } from "react"
import { connect } from 'react-redux';
import { setSelectedBook, updateSelectedBook } from '../actions'
class Book extends Component {
  handleSummary = (value) => {
    this.setState(() => ({ buttonClicked: value }));
  }
  state = {
    editClicked: false,
    book: this.props.book
  }
  handleEdit = () => {
    this.setState(()=>({editClicked:true}))
  }
  handleSave = ()=> {
    this.props.dispatch(updateSelectedBook(this.state.book))
    this.setState(()=>({editClicked:false}))
    this.props.dispatch(setSelectedBook(this.state.book));
  }
  onSummaryEdit = ( e) => {
    const value = e.target.value
    this.setState((currS)=>{
      currS.book.summary = value;
      return currS;
    })
  }
  render() {
    const { book, editClicked } = this.state
    return (
      <div>
        <div className="card" style={{ "width": 250, "marginLeft": 25 }}>
          <div className="card-body">
            <h5 className="card-title text-center">{book.title}</h5>
            <div className="card-text">
              <span>Author: {book.author}</span><br />
              <span>Genre: {book.genre}</span><br />
              <br />
              {editClicked === false
                ? (<div><span>{book.summary}</span><br/></div>) 
                : (<div><textarea name="summary" onChange={(e)=>this.onSummaryEdit(e)} value={this.state.book.summary} className="form-control"/><br/></div>)
                }
            </div>
            <br/>
            {editClicked === false
                ? (<button className="btn btn-warning" onClick={() => this.handleEdit()}>Edit this</button>) 
                : (<button className="btn btn-success" onClick={() => this.handleSave()}>Save</button>)
                }
          </div>
        </div>
        <br />
      </div>
    )
  }
}
function mapStateToProps({ selectedBook }) {
  return {
    selectedBook,
  }
}
export default connect(mapStateToProps)(Book);
 

Step 5: Root index - src/index.js

/**
* index.js - root file of the application
*/ 
/* REACT related imports*/
import React from 'react'
import ReactDOM from 'react-dom'
/* REDUX related imports*/
import { createStore } from 'redux'
import { Provider } from 'react-redux'
import rootReducer from './reducers'
/* Styling and App's React components related imports*/
import './index.css'
import 'bootstrap/dist/css/bootstrap.min.css'
import App from './components/App'
/* Creating the REDUX STORE const store */
const store = createStore(rootReducer)
/* Loading the <App/> root view-component of the app
* <Provided/> by the {store}
* inside ReactDOM.render() */
ReactDOM.render(
  <Provider store={store}>
	  <App/>
  </Provider>,
document.getElementById('root')
)